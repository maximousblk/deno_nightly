name: release

on:
  workflow_dispatch: # manual trigger
  schedule:
    - cron: "0 0 * * *" # Everyday at ~00:00 UTC

jobs:
  prep:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.now.outputs.formattedTime }}
      head: ${{ steps.commit.outputs.hash }}

    steps:
      - name: Get Date # To use as tag
        uses: 1466587594/get-current-time@v1
        id: now
        with:
          format: YYYY.MM.DD

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          repository: "denoland/deno"
          fetch-depth: 1 # No need for full version history
          submodules: false

      - name: Get commit hash # For release notes
        id: commit
        run: echo "::set-output name=hash::$(git rev-parse HEAD)"

      - name: Setup Deno
        uses: denolib/setup-deno@v2
        with:
          deno-version: v1.7.x

      - name: Generate Release Notes
        run: |
          deno run -A http://denopkg.com/maximousblk/deno_nightly/.github/notes.ts
          deno run -A http://denopkg.com/maximousblk/deno_nightly/.github/notes.ts --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_COMMIT: ${{ steps.commit.outputs.hash }}
          BUILD_TAG: ${{ steps.now.outputs.formattedTime }}

      - name: Upload release notes
        uses: actions/upload-artifact@v2
        with:
          name: notes
          path: |
            ${{ steps.now.outputs.formattedTime }}.md
            latest.md
          if-no-files-found: error

  build:
    name: build / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    needs: prep

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
#     DENO_CANARY: true

    steps:
      - name: Enable long paths on windows
        if: startsWith(matrix.os, 'windows')
        run: git config --global core.longpaths true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          repository: "denoland/deno"
          ref: ${{ needs.prep.outputs.head }}
          fetch-depth: 1 # No need for full version history
          submodules: true

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.50.0

      - name: Setup Deno
        uses: denolib/setup-deno@v2
        with:
          deno-version: v1.2.2

      - name: Inject Custom version
        run: deno run -A http://denopkg.com/maximousblk/deno_nightly/.github/inject.ts -b ${{ needs.prep.outputs.tag }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --all-targets

      - name: Zip linux release
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: target/release
        run: zip -r deno-nightly-x86_64-unknown-linux-gnu.zip deno

      - name: Zip mac release
        if: startsWith(matrix.os, 'macOS')
        working-directory: target/release
        run: zip -r deno-nightly-x86_64-apple-darwin.zip deno

      - name: Zip windows release
        if: startsWith(matrix.os, 'windows')
        working-directory: target/release
        run: Compress-Archive -CompressionLevel Optimal -Force -Path deno.exe -DestinationPath deno-nightly-x86_64-pc-windows-msvc.zip

      - name: Export Stable Type Docs
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: target/release
        run: ./deno types > lib.deno-nightly.d.ts

      - name: Export Unstable Type Docs
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: target/release
        run: ./deno types --unstable > lib.deno-nightly.unstable.d.ts

      - name: Upload Builds
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: |
            target/release/deno-nightly-x86_64-unknown-linux-gnu.zip
            target/release/deno-nightly-x86_64-apple-darwin.zip
            target/release/deno-nightly-x86_64-pc-windows-msvc.zip
            target/release/lib.deno-nightly.d.ts
            target/release/lib.deno-nightly.unstable.d.ts

  release:
    name: release / ${{ matrix.tag }}
    needs: [prep, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ["latest", "${{ needs.prep.outputs.tag }}"]

    steps:
      - name: Download Builds
        uses: actions/download-artifact@v2

      - name: Release ${{ matrix.tag }}
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ matrix.tag }}"
          name: "${{ matrix.tag }}"
          prerelease: ${{ matrix.tag == 'latest' }}
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "release/*"
          bodyFile: "notes/${{ matrix.tag }}.md"
          token: ${{ secrets.GITHUB_TOKEN }}
