name: Build and Release

on:
  workflow_dispatch: # manual trigger
  # schedule:
  #   - cron: "0 0 * * *" # Everyday at ~00:00 UTC

jobs:
  release:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60 # in case something gets stuck
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-latest]

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
      # SETUP

      - name: Get current date # To use as tag
        uses: 1466587594/get-current-time@v1
        id: now
        with:
          format: YYYY.MM.DD

      - name: Enable long paths on windows

        # Get your shit together windows.
        # Get it all together.
        # And put it in a backpack.
        # All your shit.
        # So it’s together.
        # And if you gotta take it somewhere, take it somewhere,
        # you know, take it to the shit store and sell it…
        # Or put it in a shit museum,
        # I don’t care what you do, you just gotta get it together.

        if: startsWith(matrix.os, 'windows')
        run: git config --global core.longpaths true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          repository: "denoland/deno"
          fetch-depth: 1 # No need for full version history
          submodules: true

      - name: Get commit hash # For release notes
        id: commit
        run: echo "::set-output name=hash::$(git rev-parse HEAD)"

      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: 1.45.0

      - name: Setup Deno
        if: startsWith(matrix.os, 'ubuntu')
        uses: denolib/setup-deno@v2.1.0
        with:
          deno-version: v1.2.2

      # BUILD

      - name: Generate Release Notes
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          deno run -A https://denonightly.now.sh/notes -c ${{ steps.commit.outputs.hash }} -t ${{ secrets.GITHUB_TOKEN }} -b ${{ steps.now.outputs.formattedTime }}
          deno run -A https://denonightly.now.sh/notes -c ${{ steps.commit.outputs.hash }} -t ${{ secrets.GITHUB_TOKEN }} -b latest

      - name: Upload release notes
        uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: notes
          path: |
            ${{ steps.now.outputs.formattedTime }}.md
            latest.md

      - name: Build
        run: cargo build --release --locked --all-targets

      - name: Zip linux release
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: target/release
        run: zip -r deno-nightly-x86_64-unknown-linux-gnu.zip deno

      - name: Zip mac release
        if: startsWith(matrix.os, 'macOS')
        working-directory: target/release
        run: zip -r deno-nightly-x86_64-apple-darwin.zip deno

      - name: Zip windows release
        if: startsWith(matrix.os, 'windows')
        working-directory: target/release
        run: Compress-Archive -CompressionLevel Optimal -Force -Path deno.exe -DestinationPath deno-nightly-x86_64-pc-windows-msvc.zip

      - name: Export Stable Type Docs
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: target/release
        run: ./deno types > lib.deno-nightly.d.ts

      - name: Export Unstable Type Docs
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: target/release
        run: ./deno types --unstable > lib.deno-nightly.unstable.d.ts

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: |
            target/release/deno-nightly-x86_64-unknown-linux-gnu.zip
            target/release/deno-nightly-x86_64-apple-darwin.zip
            target/release/deno-nightly-x86_64-pc-windows-msvc.zip
            target/release/lib.deno-nightly.d.ts
            target/release/lib.deno-nightly.unstable.d.ts

      # RELEASE

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Latest Release
        uses: ncipollo/release-action@v1
        with:
          tag: "latest"
          name: "latest"
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "release/*"
          bodyFile: "notes/latest.md"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dated Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.now.outputs.formattedTime }}
          name: ${{ steps.now.outputs.formattedTime }}
          prerelease: false
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "release/*"
          bodyFile: "notes/${{ steps.now.outputs.formattedTime }}.md"
          token: ${{ secrets.GITHUB_TOKEN }}
